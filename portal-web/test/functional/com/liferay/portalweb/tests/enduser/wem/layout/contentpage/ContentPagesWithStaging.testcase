@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Activate local live staging") {
			JSONStaging.enableLocalStaging(
				branchingPrivate = "false",
				branchingPublic = "false",
				groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Published content pages should remain if staging is deactivated."
	@priority = "4"
	test DeactivateStagingAfterPublish {
		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Test Content Page Name",
				site = "false",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name Staging");
		}

		task ("Add a Heading fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add a Paragraph fragment below the Heading") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Heading");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Publish the site to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Deactivate staging") {
			Staging.deactivateStagingCP(siteName = "Test Site Name");
		}

		task ("Navigate to the content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the Heading fragment still present after deactivating staging") {
			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");
		}

		task ("Assert the Paragraph fragment still present after deactivating staging") {
			AssertTextEquals(
				key_fragmentName = "paragraph",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.");
		}
	}

	@description = "This is a test for LPS-97189. Editing a web content in the contents panel in a content page editor survives staging."
	@priority = "2"
	test EditWebContentViaContentsPanel {
		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name (Staging)",
				site = "false",
				title = "Web Content Title");
		}

		task ("Add a content page based on Blank") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Test Page Name",
				site = "false",
				type = "content");
		}

		task ("Add a Web Content Display to content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name Staging");

			PageEditor.addWidget(portletName = "Web Content Display");
		}

		task ("Select the web content in Web Content Display") {
			WebContentDisplayPortlet.selectWebContent(
				contentPage = "true",
				webContentTitle = "Web Content Title");

			Refresh();
		}

		task ("Assert the web content is shown in Web Content Display") {
			AssertVisible(
				key_portletName = "Web Content Content",
				locator1 = "Portlet#BODY");
		}

		task ("Edit the web content via Contents panel") {
			WebContent.editViaContentPanel(
				webContentContentEdit = "Web Content Content Edit",
				webContentTitle = "Web Content Title",
				webContentTitleEdit = "Web Content Title Edit");
		}

		task ("Assert the edited web content is shown in Web Content Display") {
			AssertVisible(
				key_portletName = "Web Content Content Edit",
				locator1 = "Portlet#BODY");
		}
	}

	@description = "This is a test for LPS-120198. Link page to fragment works on Staging and Live site."
	@priority = "4"
	test MapPageToTextFragment {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Test Widget Page Name",
				site = "false");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Test Page Name",
				site = "false",
				type = "content");
		}

		task ("Add a Heading fragment to content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name Staging");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the widget page to editable field of Heading") {
			PageEditorEditableLink.mapEditableFieldToPage(
				fragmentName = "Heading",
				id = "element-text",
				pageName = "Test Widget Page Name");
		}

		task ("View the selected page is shown in Page field") {
			AssertVisible(
				key_contentName = "Test Widget Page Name",
				locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT");
		}

		task ("View selected page is linked to Heading fragment") {
			var baseURL = PropsUtil.get("portal.url");

			AssertVisible(
				key_append = "[normalize-space(text())='Heading Example']",
				key_URL = "${baseURL}/web/test-site-name-staging/test-widget-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");
		}

		task ("Publish the content page") {
			PortletEntry.publish();
		}

		task ("Publish to Live") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name Staging");

			Staging.gotoPublishToLive();

			Staging.publishToLive();
		}

		task ("Navigate to content page in staging site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name Staging");

			Click(
				key_append = "[normalize-space(text())='Heading Example']",
				key_URL = "${baseURL}/web/test-site-name-staging/test-widget-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");
		}

		task ("Assert redirect to widget page in staging site") {
			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Widget Page Name");

			AssertLocation.assertPartialLocation(value1 = "web/test-site-name-staging/test-widget-page-name");
		}

		task ("Navigate to content page in live site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Click(
				key_append = "[normalize-space(text())='Heading Example']",
				key_URL = "${baseURL}/web/test-site-name/test-widget-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");
		}

		task ("Assert redirect to widget page in live site") {
			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Widget Page Name");

			AssertLocation.assertPartialLocation(value1 = "web/test-site-name/test-widget-page-name");
		}
	}

	@description = "This is a test for LPS-98030. A mapped editable background image of a fragment survives local staging."
	@priority = "2"
	test MapWebContentImageToBackgroundImageOfBannerCenter {
		task ("Add a web content structure with an Image field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name-staging");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Image",
				fieldName = "Image");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");
		}

		task ("Upload an image from Image field") {
			WebContent.addWithStructureCP(
				navTab = "Web Content Images",
				structureName = "WC Structure Name",
				webContentImage = "Document_2.jpeg",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a content page based on Blank") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Test Page Name",
				site = "false",
				type = "content");
		}

		task ("Add a Banner Center to content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name Staging");

			PageEditor.addFragment(
				collectionName = "Featured Content",
				fragmentName = "Banner Center");
		}

		task ("Map web content image to background image field of Banner Center") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Banner Center",
				id = "banner-center");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Image");

			PageEditor.waitForAutoSave();
		}

		task ("Assert the mapped image is shown in background image field") {
			AssertVisible(
				key_imageName = "Document_2.jpeg",
				locator1 = "Fragment#FRAGMENT_SECTION_BACKGROUND_IMAGE");

			PageEditor.clickPublish();
		}

		task ("Assert the mapped image is shown in view mode in staging site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name Staging");

			AssertVisible(
				key_imageName = "Document_2.jpeg",
				locator1 = "Fragment#FRAGMENT_SECTION_BACKGROUND_IMAGE");
		}

		task ("Publish to Live") {
			Staging.gotoPublishToLive();

			Staging.publishToLive();
		}

		task ("Assert the mapped image is shown in view mode in live site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				key_imageName = "Document_2.jpeg",
				locator1 = "Fragment#FRAGMENT_SECTION_BACKGROUND_IMAGE");
		}
	}

	@description = "This is a test for LPS-112030. Can return to a specific interaction state via Undo History list in Staging site."
	@priority = "3"
	test NavigateToSpecificInteractionStateViaUndoHistoryInStagingSite {
		task ("Add a content page in staging site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Test Content Page Name",
				site = "false",
				type = "content");
		}

		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name Staging");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Heading fragment inside Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments");
		}

		task ("Edit the inline content of Heading") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "New editable fragment text");
		}

		task ("Change the background color of Container") {
			PageEditor.editLayoutContainer(
				backgroundColor = "Success",
				panel = "Styles");
		}

		task ("Remove the Container") {
			PageEditor.removeFragment(fragmentName = "Container");
		}

		task ("Navigate to a specific interaction state via undo history") {
			Click(locator1 = "PageEditor#UNDO_HISTORY");

			for (var menuItem : list "Add Container,Add Heading,Update Heading Editable Values,Update Container Configuration") {
				MenuItem.viewVisible(menuItem = "${menuItem}");
			}

			MenuItem.click(menuItem = "Add Container");

			PageEditor.viewFragment(fragmentName = "Container");

			for (var menuItem : list "Add Container,Add Heading,Update Heading Editable Values,Update Container Configuration") {
				MenuItem.viewVisible(menuItem = "${menuItem}");
			}

			MenuItem.click(menuItem = "Add Heading");

			AssertElementPresent(
				key_elementHeader = "//div[contains(@class,'page-editor__topper')][1]/div[contains(.,'Heading')]//li[contains(@class,'title')]",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");

			MenuItem.click(menuItem = "Update Heading Editable Values");

			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "New editable fragment text");

			for (var menuItem : list "Add Container,Add Heading,Update Heading Editable Values,Update Container Configuration") {
				MenuItem.viewVisible(menuItem = "${menuItem}");
			}

			MenuItem.click(menuItem = "Update Container Configuration");

			PageEditor.viewContainerStyle(
				backgroundColor = "success",
				position = "1");

			for (var menuItem : list "Add Container,Add Heading,Update Heading Editable Values,Update Container Configuration") {
				MenuItem.viewVisible(menuItem = "${menuItem}");
			}
		}
	}

	@description = "Content pages only appear in live view after being published and should appear properly."
	@priority = "5"
	test PublishContentPageToLive {
		property portal.acceptance = "true";

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Test Content Page Name",
				site = "false",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name Staging");
		}

		task ("Add a Heading fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add a Paragraph fragment below the Heading") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Heading");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page in the staging site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name Staging");
		}

		task ("View the Heading fragment in view mode") {
			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");
		}

		task ("View the Paragraph fragment in view mode") {
			AssertTextEquals(
				key_fragmentName = "paragraph",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.");
		}

		task ("View the no resource shown in the live site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertTextPresent(value1 = "The requested resource could not be found.");
		}

		task ("Publish the site to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Navigate to the content page in the live site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("View the Heading fragment") {
			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");
		}

		task ("View the Paragraph fragment") {
			AssertTextEquals(
				key_fragmentName = "paragraph",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.");
		}
	}

	@description = "Changes of content pages should not appear in the live site until after published."
	@priority = "5"
	test PublishEditedContentPageToLive {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,websphere,wildfly";
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property environment.acceptance = "true";
		property portal.acceptance = "true";

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Test Content Page Name",
				site = "false",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name Staging");
		}

		task ("Add a Heading fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add a Paragraph fragment below the Heading") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Heading");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Publish the site to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Navigate to the content page at edit mode in the staging site") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name Staging");
		}

		task ("Add a Button fragment below the Paragraph") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button",
				targetFragmentName = "Paragraph");
		}

		task ("Edit the inline content of Paragraph") {
			PageEditor.editFragmentText(
				fragmentName = "Paragraph",
				id = "element-text",
				text = "New editable fragment text");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("View the Heading fragment in view mode") {
			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");
		}

		task ("View the edited inline content shown in Paragraph") {
			AssertTextEquals(
				key_fragmentName = "paragraph",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "New editable fragment text");
		}

		task ("View the Button fragment shown in view mode") {
			AssertTextEquals(
				key_fragmentName = "button",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Go Somewhere");
		}

		task ("Navigate to the content page in the live site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("View the Heading fragment") {
			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");
		}

		task ("View the Paragraph fragment keeps default inline content") {
			AssertTextEquals(
				key_fragmentName = "paragraph",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.");
		}

		task ("View the Button fragment not shown") {
			AssertElementNotPresent(
				key_fragmentName = "button",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT");
		}

		task ("Publish the site to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Navigate to the content page in the live site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("View the Heading fragment") {
			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");
		}

		task ("View the edited inline content shown in Paragraph") {
			AssertTextEquals(
				key_fragmentName = "paragraph",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "New editable fragment text");
		}

		task ("View the Button fragment shown") {
			AssertTextEquals(
				key_fragmentName = "button",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Go Somewhere");
		}
	}

	@description = "This is a test for LPS-111946. Undo can bring deleted fragments back in Staging site."
	@priority = "3"
	test UndoDeletedFragmentInStagingSite {
		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Test Content Page Name",
				site = "false",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name Staging");
		}

		task ("Add a Heading fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add a Paragraph fragment below the Heading") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Heading");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page at edit mode in the staging site") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name Staging");
		}

		task ("Remove Heading frgament in staging site") {
			PageEditor.removeFragment(fragmentName = "Heading");
		}

		task ("Assert the Heading fragment is removed") {
			PageEditor.viewNoFragment(fragmentName = "Heading");
		}

		task ("Click Undo to revert change") {
			Click(
				key_text = "undo",
				locator1 = "Icon#ANY");
		}

		task ("View the Heading fragment") {
			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");
		}

		task ("View the Paragraph fragment") {
			AssertTextEquals(
				key_fragmentName = "paragraph",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.");
		}
	}

}