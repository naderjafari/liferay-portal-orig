@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Auto Tagging";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		AutoTagging.enableAutoTagging(enableAutoTaggingFor = "System Settings");

		AutoTagging.enableTensorFlow();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This test covers LPS-89073. It ensures that users can add and remove tags for existing images via Gogo Shell."
	@priority = "4"
	@refactorneeded
	test AddAndRemoveImageAutoTagViaGogoShell {
		property test.name.skip.portal.instance = "DMAutoTagging#AddAndRemoveImageAutoTagViaGogoShell";

		for (var documentNumber : list "_1,_2,_3") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentFile = "Document_4.jpg",
				dmDocumentFileName = "Document${documentNumber}.jpg",
				dmDocumentTitle = "DM Document JPG${documentNumber}");

			DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document JPG${documentNumber}");

			DMDocument.viewCP(dmDocumentTitle = "DM Document JPG${documentNumber}");

			AutoTagging.assertAutoTagPresent(tagName = "carton");

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");
		}

		GogoShell.openGogoShellAdmin();

		var companyId = JSONCompany.getCompanyId();

		GogoShell.executeCommand(commandName = "assetAutoTagger:untagAll ${companyId}");

		GogoShell.viewOutput(outputContent = "Deleted 1 tags to asset entry DM Document JPG_1 Deleted 1 tags to asset entry DM Document JPG_2 Deleted 1 tags to asset entry DM Document JPG_3");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		for (var documentNumber : list "_1,_2,_3") {
			DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document JPG${documentNumber}");

			DMDocument.viewCP(dmDocumentTitle = "DM Document JPG${documentNumber}");

			AutoTagging.assertNoAutoTag(tagName = "carton");

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");
		}

		GogoShell.openGogoShellAdmin();

		GogoShell.executeCommand(commandName = "assetAutoTagger:tagAllUntagged ${companyId}");

		GogoShell.viewOutput(outputContent = "Added 1 tags to asset entry DM Document JPG_1 Added 1 tags to asset entry DM Document JPG_2 Added 1 tags to asset entry DM Document JPG_3");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		for (var documentNumber : list "_1,_2,_3") {
			DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document JPG${documentNumber}");

			DMDocument.viewCP(dmDocumentTitle = "DM Document JPG${documentNumber}");

			AutoTagging.assertAutoTagPresent(tagName = "carton");

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");
		}
	}

	@description = "This test asserts that auto-tags added to an image uploaded on a staged site gets published to Live."
	@priority = "4"
	@refactorneeded
	test AssertImageAutoTagAfterPublishToLive {
		property test.name.skip.portal.instance = "DMAutoTagging#AssertImageAutoTagAfterPublishToLive";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.enableActionsMenuOnPortlet();

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging");

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.addPG(
			dmDocumentDescription = "Document Description",
			dmDocumentFile = "Document_4.jpg",
			dmDocumentTitle = "Document Title");

		Navigator.gotoStagedSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.viewPG(
			dmDocumentDescription = "Document Description",
			dmDocumentTitle = "Document Title");

		AutoTagging.assertAutoTagPresent(tagName = "carton");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		ProductMenu.gotoLiveSite(site = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.viewPG(
			dmDocumentDescription = "Document Description",
			dmDocumentTitle = "Document Title");

		AutoTagging.assertAutoTagPresent(tagName = "carton");
	}

	@description = "This test asserts that tags are added to the images when they are uploaded on both nodes with tensorflow enabled on a clustered configuration."
	@priority = "4"
	@refactorneeded
	test AutoTagImagesOnSeparateNodes {
		property app.server.bundles.size = "1";
		property cluster.enabled = "true";
		property test.name.skip.portal.instance = "DMAutoTagging#AutoTagImagesOnSeparateNodes";

		Clustering.viewClusterStatusInConsole();

		Navigator.openURL();

		Page.assertNodePortPG(nodePort = "8080");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = "9080");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Assets",
			configurationName = "TensorFlow Image Auto Tagging",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewCheckboxChecked(fieldName = "enabled");

		AssertElementNotPresent(
			key_infoMessage = "The TensorFlow model will be downloaded in the background. No tags will be created until the model is fully downloaded",
			locator1 = "Message#INFO_SPECIFIC");

		AssertElementNotPresent(
			key_infoMessage = "The TensorFlow model is being downloaded in the background. No tags will be created until the model is fully downloaded",
			locator1 = "Message#INFO_SPECIFIC");

		DMNavigator.openDocumentsAndMediaAdmin(
			baseURL = "http://localhost:9080",
			siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "Document Description",
			dmDocumentFile = "Document_4.jpg",
			dmDocumentTitle = "DM Document JPG Node2");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document JPG Node2");

		DMDocument.viewCP(dmDocumentTitle = "DM Document JPG Node2");

		AutoTagging.assertAutoTagPresent(tagName = "carton");

		User.logoutPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Document JPG Node2",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCP(dmDocumentTitle = "DM Document JPG Node2");

		AutoTagging.assertAutoTagPresent(tagName = "carton");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "Document Description",
			dmDocumentFile = "Commerce_Black.jpg",
			dmDocumentTitle = "DM Document JPG Node1");

		Pause(locator = "3000");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Document JPG Node1",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCP(dmDocumentTitle = "DM Document JPG Node1");

		AutoTagging.assertAutoTagPresent(tagName = "jersey");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openToEntryInAdmin(
			baseURL = "http://localhost:9080",
			dmDocumentTitle = "DM Document JPG Node1",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCP(dmDocumentTitle = "DM Document JPG Node1");

		AutoTagging.assertAutoTagPresent(tagName = "jersey");

		User.logoutPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	@description = "This test asserts that no auto-tag is generated when an image is uploaded to a site that has auto-tagging disabled despite the auto-tagging functionality enabled at portal level."
	@priority = "4"
	@refactorneeded
	test ConfigureImageAutoTaggingPerSite {
		property test.name.skip.portal.instance = "DMAutoTagging#ConfigureImageAutoTaggingPerSite";

		JSONGroup.addGroup(groupName = "Site AutoTag Enabled");

		JSONLayout.addPublicLayout(
			groupName = "Site AutoTag Enabled",
			layoutName = "AutoTag Enabled Site Page");

		JSONGroup.addGroup(groupName = "Site AutoTag Disabled");

		JSONLayout.addPublicLayout(
			groupName = "Site AutoTag Disabled",
			layoutName = "AutoTag Disabled Site Page");

		Navigator.openSiteURL(siteName = "Site AutoTag Disabled");

		AutoTagging.disableAutoTagging(
			disableAutoTaggingFor = "Site Settings",
			site = "Site AutoTag Disabled");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document JPG",
			groupName = "Site AutoTag Enabled",
			mimeType = "image/jpeg",
			sourceFileName = "Document_4.jpg");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Document JPG",
			groupName = "Site AutoTag Enabled",
			siteURLKey = "site-autotag-enabled");

		DMDocument.viewCP(dmDocumentTitle = "DM Document JPG");

		AutoTagging.assertAutoTagPresent(tagName = "carton");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document JPG",
			groupName = "Site AutoTag Disabled",
			mimeType = "image/jpeg",
			sourceFileName = "Document_4.jpg");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Document JPG",
			groupName = "Site AutoTag Disabled",
			siteURLKey = "site-autotag-disabled");

		DMDocument.viewCP(dmDocumentTitle = "DM Document JPG");

		AutoTagging.assertNoAutoTag(tagName = "carton");
	}

	@description = "This test covers LPS-101885. It asserts that an auto-tagged document can be deleted when OpenNLP Auto-Tagging is enabled."
	@priority = "4"
	@refactorneeded
	test DeleteAutoTaggedDocument {
		property test.name.skip.portal.instance = "DMAutoTagging#DeleteAutoTaggedDocument";

		AutoTagging.enableOpenNLP(
			assetType = "Document",
			confidenceThreshold = "0.05");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Alice's Adventures in Wonderland.docx",
			dmDocumentTitle = "DM Document DOCX");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.deleteCP(dmDocumentTitle = "DM Document DOCX");

		AssertConsoleTextNotPresent(value1 = "javax.portlet.PortletException");

		DMDocument.viewDefaultCP();
	}

	@description = "This test asserts that the max number of tags at the instance level cannot be greater than the max number of tags at the portal level."
	@priority = "4"
	@refactorneeded
	test MaxNumberOfTagsCheckBetweenInstanceLevelAndPortalLevel {
		property test.name.skip.portal.instance = "DMAutoTagging#MaxNumberOfTagsCheckBetweenInstanceLevelAndPortalLevel";

		AutoTagging.enableAutoTagging(
			enableAutoTaggingFor = "System Settings",
			maximumNumberOfTags = "5");

		AutoTagging.enableAutoTagging(
			enableAutoTaggingFor = "Instance Settings",
			maximumNumberOfTags = "10",
			validationError = "Maximum number of tags cannot be greater than the maximum number of system tags.");
	}

	@description = "This test asserts that no auto-tags are generated for manually tagged images."
	@priority = "4"
	@refactorneeded
	test NoAutoTagForManuallyTaggedImage {
		property test.name.skip.portal.instance = "DMAutoTagging#NoAutoTagForManuallyTaggedImage";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.addPG(
			dmDocumentDescription = "Document Description",
			dmDocumentFile = "Document_4.jpg",
			dmDocumentTitle = "Document Title",
			tagNameList = "ManualTag,NotAutoTagged");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewPG(
			dmDocumentDescription = "Document Description",
			dmDocumentTitle = "Document Title",
			tagNameList = "manualtag,notautotagged");

		AutoTagging.assertNoAutoTag(tagName = "carton");
	}

	@description = "This test covers LPS-94208. It asserts that a document is auto tagged when OpenNLP Auto-Tagging is enabled."
	@priority = "5"
	@refactorneeded
	test OpenNLPSmoke {
		property environment.acceptance = "true";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "DMAutoTagging#OpenNLPSmoke";

		AutoTagging.enableOpenNLP(
			assetType = "Document",
			confidenceThreshold = "0.05");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Alice's Adventures in Wonderland.docx",
			dmDocumentTitle = "DM Document DOCX");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Document DOCX",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCP(dmDocumentTitle = "DM Document DOCX");

		AutoTagging.assertAutoTagPresent(tagName = "adventures");

		AutoTagging.assertAutoTagPresent(tagName = "alice");
	}

	@description = "This test asserts that auto-tags can be deleted."
	@priority = "4"
	@refactorneeded
	test RemoveImageAutoTag {
		property test.name.skip.portal.instance = "DMAutoTagging#RemoveImageAutoTag";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "Auto Tagged Image Description",
			dmDocumentTitle = "Auto Tagged Image",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_4.jpg");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.viewPG(
			dmDocumentDescription = "Auto Tagged Image Description",
			dmDocumentTitle = "Auto Tagged Image",
			tagNameList = "carton");

		DMDocument.removeTag(removeTag = "carton");

		Button.clickPublish();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewPG(
			dmDocumentDescription = "Auto Tagged Image Description",
			dmDocumentTitle = "Auto Tagged Image");

		AutoTagging.assertNoAutoTag(tagName = "carton");
	}

	@description = "This test covers LPS-94209. It asserts that OpenNLP auto-tags can be deleted."
	@priority = "4"
	@refactorneeded
	test RemoveOpenNLPAutoTag {
		property test.name.skip.portal.instance = "DMAutoTagging#RemoveOpenNLPAutoTag";

		AutoTagging.enableOpenNLP(
			assetType = "Document",
			confidenceThreshold = "0.05");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.addPG(
			dmDocumentDescription = "Auto Tagged PDF Description",
			dmDocumentFile = "Alice's Adventures in Wonderland.pdf",
			dmDocumentTitle = "Auto Tagged PDF");

		DMDocument.viewPG(
			dmDocumentDescription = "Auto Tagged PDF Description",
			dmDocumentTitle = "Auto Tagged PDF",
			tagNameList = "alice");

		DMDocument.removeTag(removeTag = "alice");

		Button.clickPublish();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewPG(
			dmDocumentDescription = "Auto Tagged PDF Description",
			dmDocumentTitle = "Auto Tagged PDF",
			tagNameList = "adventures");

		DMDocument.removeTag(removeTag = "adventures");

		Button.clickPublish();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewPG(
			dmDocumentDescription = "Auto Tagged PDF Description",
			dmDocumentTitle = "Auto Tagged PDF");

		AutoTagging.assertNoAutoTag(tagName = "alice");
	}

	@description = "This test asserts that an image is auto-tagged during upload when Auto-Tagging is enabled."
	@priority = "5"
	@refactorneeded
	test Smoke {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "DMAutoTagging#Smoke";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document JPG",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_4.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document JPG");

		DMDocument.viewCP(dmDocumentTitle = "DM Document JPG");

		AutoTagging.assertAutoTagPresent(tagName = "carton");
	}

}