@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-128904. The page editor should still work when select a preview item."
	@priority = "4"
	test EditPageContentWhenPreviewItemSelected {
		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a display page template for Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Banner Center fragment to the display Page Template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Featured Content",
				fragmentName = "Banner Center");
		}

		task ("Mapping the Title field to title editable field") {
			PageEditorMapping.mapEditableTextToField(
				field = "Title",
				fragmentName = "Banner Center",
				id = "01-title");
		}

		task ("Select the web content via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "Web Content Title",
				assetType = "Web Content Article");
		}

		task ("View title of web content shown in title editable field") {
			PageEditor.viewFragmentEditableText(
				editableText = "Web Content Title",
				fragmentName = "Banner Center",
				id = "01-title");
		}

		task ("Mapping the Content field to subtitle editable field") {
			PageEditorMapping.mapEditableTextToField(
				field = "Content",
				fragmentName = "Banner Center",
				id = "02-subtitle");
		}

		task ("View content of web content shown in subtitle editable field") {
			PageEditor.viewFragmentEditableText(
				editableText = "Web Content Content",
				fragmentName = "Banner Center",
				id = "02-subtitle");
		}

		task ("Edit inline content of link editable field") {
			PageEditor.editFragmentText(
				fragmentName = "Banner Center",
				id = "03-link",
				text = "Edited Text");
		}

		task ("View the edited inline content of link editable field") {
			PageEditor.viewFragmentEditableText(
				editableText = "Edited Text",
				fragmentName = "Banner Center",
				id = "03-link");
		}
	}

	@description = "This is a test for LPS-128904. Look for the item via scroll bar when there are lots of items shown in Preview With dropdown list."
	@priority = "4"
	test ViewItemInDropdownListViaScrollBar {
		task ("Add 21 web contents based on Basic Web Content") {
			var n = "1";

			while ("${n}" != "22" && (maxIterations = "30")) {
				JSONWebcontent.addWebContent(
					content = "Web Content Content ${n}",
					groupName = "Test Site Name",
					title = "Web Content Title ${n}");

				var n = ${n} + 1;
			}
		}

		task ("Add a display page template for Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Heading fragment to the display Page Template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Mapping the Title field to Heading fragment") {
			PageEditorMapping.mapEditableTextToField(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Preview 16 different web contents via preview item selector") {
			var n = "1";

			while ("${n}" != "17" && (maxIterations = "30")) {
				DisplayPageTemplate.selectPreviewItem(
					assetTitle = "Web Content Title ${n}",
					assetType = "Web Content Article",
					searchTerm = "&quot;Web Content Title ${n}&quot;");

				var n = ${n} + 1;
			}
		}

		task ("Select the top item in dropdown list via scroll bar") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "Web Content Title 16",
				assetType = "Web Content Article",
				item = "Web Content Title 16");
		}

		task ("Select the bottom item in dropdown list via scroll bar") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "Web Content Title 1",
				assetType = "Web Content Article",
				item = "Web Content Title 1");
		}
	}

	@description = "This is a test for LPS-131040. View mapped content of selected category and subcategory preview items."
	@priority = "5"
	test ViewMappedContentOfPreviewCategoryItem {
		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a subCategory") {
			JSONCategory.addSubcategory(
				groupName = "Test Site Name",
				parentCategoryName = "Category Name",
				title = "Subcategory Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a display page template for Category") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Category",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name");
		}

		task ("Add a Heading fragment to display Page Template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Mapping the Name field to Heading fragment") {
			PageEditorMapping.mapEditableTextToField(
				field = "Name",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Select the category via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "Category Name",
				assetType = "Category");
		}

		task ("View category name shown in Heading fragment") {
			PageEditor.viewFragmentEditableText(
				editableText = "Category Name",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Select the None via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "-- None --",
				item = "-- None --");
		}

		task ("View Heading Example shown in Heading fragment") {
			PageEditor.viewFragmentEditableText(
				editableText = "Heading Example",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Open the Preview modal") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			Click(locator1 = "PageEditor#PREVIEW");
		}

		task ("Select the category via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "Category Name",
				assetType = "Category",
				modal = "true");
		}

		task ("View category name shown in Heading fragment") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Category Name");

			SelectFrameTop();
		}

		task ("Select the None via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "-- None --",
				item = "-- None --",
				modal = "true");
		}

		task ("View Heading Example shown in Heading fragment") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");
		}

		task ("Close the iframe") {
			IFrame.closeFrame();
		}

		task ("Select the subcategory via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "Subcategory Name",
				assetType = "Category");
		}

		task ("View the subcategory name shown in Heading fragment") {
			PageEditor.viewFragmentEditableText(
				editableText = "Subcategory Name",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Select the None via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "-- None --",
				item = "-- None --");
		}

		task ("View Heading Example shown in Heading fragment") {
			PageEditor.viewFragmentEditableText(
				editableText = "Heading Example",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Open the Preview modal") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			Click(locator1 = "PageEditor#PREVIEW");
		}

		task ("Select the subcategory via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "Subcategory Name",
				assetType = "Category",
				modal = "true");
		}

		task ("View the subcategory name shown in Heading fragment") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Subcategory Name");

			SelectFrameTop();
		}

		task ("Select the None via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "-- None --",
				item = "-- None --",
				modal = "true");
		}

		task ("View Heading Example shown in Heading fragment") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");
		}
	}

	@description = "This is a test for LPS-128904. View mapped content in page editor when select preview items."
	@priority = "5"
	test ViewMappedContentOfPreviewItem {
		property portal.acceptance = "true";

		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a blogs entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add a document with an image") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add the first display page template for Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name 1",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Heading fragment to the first display Page Template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name 1");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Mapping the Title field to Heading fragment") {
			PageEditorMapping.mapEditableTextToField(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Select the web content via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "Web Content Title",
				assetType = "Web Content Article");
		}

		task ("View title of web content shown in Heading fragment") {
			PageEditor.viewFragmentEditableText(
				editableText = "Web Content Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Select the None via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "-- None --",
				item = "-- None --");
		}

		task ("View Heading Example shown in Heading fragment") {
			PageEditor.viewFragmentEditableText(
				editableText = "Heading Example",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Open the Preview modal") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			Click(locator1 = "PageEditor#PREVIEW");
		}

		task ("Select the web content via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "Web Content Title",
				assetType = "Web Content Article",
				modal = "true");
		}

		task ("View title of web content shown in Heading fragment") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Web Content Title");

			SelectFrameTop();
		}

		task ("Select the None via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "-- None --",
				item = "-- None --",
				modal = "true");
		}

		task ("View Heading Example shown in Heading fragment") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");
		}

		task ("Add the second display page template for Blogs Entry") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Blogs Entry",
				displayPageTemplateEntryName = "Display Page Name 2",
				groupName = "Test Site Name");
		}

		task ("Add a Button fragment to display Page Template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name 2");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Mapping the Title field to Button fragment") {
			PageEditorMapping.mapEditableTextToField(
				field = "Title",
				fragmentName = "Button",
				id = "link");
		}

		task ("Select the blogs entry via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "Blogs Entry Title",
				assetType = "Blogs Entry");
		}

		task ("View title of blogs entry shown in Button fragment") {
			PageEditor.viewFragmentEditableText(
				editableText = "Blogs Entry Title",
				fragmentName = "Button",
				id = "link");
		}

		task ("Select the None via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "-- None --",
				item = "-- None --");
		}

		task ("View Go Somewhere shown in Button fragment") {
			PageEditor.viewFragmentEditableText(
				editableText = "Go Somewhere",
				fragmentName = "Button",
				id = "link");
		}

		task ("Open the Preview modal") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			Click(locator1 = "PageEditor#PREVIEW");
		}

		task ("Select the blogs entry via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "Blogs Entry Title",
				assetType = "Blogs Entry",
				modal = "true");
		}

		task ("View title of blogs entry shown in Button fragment") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertTextEquals(
				key_fragmentName = "button",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Blogs Entry Title");

			SelectFrameTop();
		}

		task ("Select the None via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "-- None --",
				item = "-- None --",
				modal = "true");
		}

		task ("View Go Somewhere shown in Button fragment") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertTextEquals(
				key_fragmentName = "button",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Go Somewhere");
		}

		task ("Add the third display page template for Document") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Document",
				displayPageTemplateEntryName = "Display Page Name 3",
				groupName = "Test Site Name",
				subType = "Basic Document");
		}

		task ("Add an Image fragment to display Page Template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name 3");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Mapping the Preview Image field to Image fragment") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Image",
				id = "image-square");

			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Preview Image");

			PageEditor.waitForAutoSave();
		}

		task ("Select the document via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "Document Title",
				assetType = "Document");
		}

		task ("View image of document shown in Image fragment") {
			PageEditor.viewFragmentEditableImage(
				id = "image-square",
				imageDescription = "",
				imageFileName = "Document_1.jpg");
		}

		task ("Select the None via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "-- None --",
				item = "-- None --");
		}

		task ("View the placeholder shown in Image fragment") {
			PageEditor.viewFragmentEditableImage(
				id = "image-square",
				imageDescription = "",
				imageFileName = "data:image/png");
		}

		task ("Open the Preview modal") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			Click(locator1 = "PageEditor#PREVIEW");
		}

		task ("Select the document via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "Document Title",
				assetType = "Document",
				modal = "true");
		}

		task ("View image of document shown in Image fragment") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			PageEditor.viewFragmentEditableImage(
				id = "image-square",
				imageDescription = "",
				imageFileName = "Document_1.jpg");

			SelectFrameTop();
		}

		task ("Select the None via preview item selector") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = "-- None --",
				item = "-- None --",
				modal = "true");
		}

		task ("View the placeholder shown in Image fragment") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			PageEditor.viewFragmentEditableImage(
				id = "image-square",
				imageDescription = "",
				imageFileName = "data:image/png");
		}
	}

	@description = "This is a test for LPS-131040. Only the public vocabularies are available in preview item selector."
	@priority = "4"
	test ViewOnlyPublicVocabulariesAvailableToItemSelector {
		task ("Add a category in Topic, Audience and Stage") {
			var n = "1";

			for (var vocabularyName : list "Topic,Audience,Stage") {
				JSONCategory.addCategory(
					groupName = "Global",
					title = "Category Name ${n}",
					vocabularyName = "${vocabularyName}");

				var n = ${n} + 1;
			}
		}

		task ("Add a display page template for Category") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Category",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name");
		}

		task ("Add a Button fragment to display Page Template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Mapping the Vocabulary field to Button fragment") {
			PageEditorMapping.mapEditableTextToField(
				field = "Vocabulary",
				fragmentName = "Button",
				id = "link");
		}

		task ("Open the preview item selector") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			Click(locator1 = "ControlMenu#DISPLAY_PAGE_PREVIEW_ITEM_SELECTOR");

			DropdownMenuItem.click(menuItem = "Select Other Item");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Portlet.expandTree();
		}

		task ("View the category of Topic (Global) is present") {
			AssertVisible(
				key_nodeName = "Category Name 1",
				locator1 = "Treeview#NODE_UNSELECTED");
		}

		task ("View Audience and Stage vocabularies are not present") {
			for (var vocabularyName : list "Audience(Global),Stage(Global)") {
				AssertElementNotPresent(
					key_nodeName = "${vocabularyName}",
					locator1 = "Treeview#NODE_UNSELECTED");
			}
		}

		task ("Close the modal") {
			IFrame.closeFrame();
		}

		task ("Open the Preview modal") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			Click(locator1 = "PageEditor#PREVIEW");
		}

		task ("Open the preview item selector in preview modal") {
			Click(locator1 = "Modal#DISPLAY_PAGE_PREVIEW_ITEM_SELECTOR");

			DropdownMenuItem.click(menuItem = "Select Other Item");

			SelectFrame(
				key_title = "Select",
				locator1 = "IFrame#MODAL_ANY");

			Portlet.expandTree();
		}

		task ("View the category of Topic is present") {
			AssertVisible(
				key_nodeName = "Category Name 1",
				locator1 = "Treeview#NODE_UNSELECTED");
		}

		task ("View Audience and Stage vocabularies are not present") {
			for (var vocabularyName : list "Audience(Global),Stage(Global)") {
				AssertElementNotPresent(
					key_nodeName = "${vocabularyName}",
					locator1 = "Treeview#NODE_UNSELECTED");
			}
		}

		task ("Delete the global categories") {
			var n = "1";

			for (var vocabularyName : list "Topic,Audience,Stage") {
				JSONCategory.deleteCategory(
					categoryName = "Category Name ${n}",
					groupName = "Global",
					vocabularyName = "${vocabularyName}");

				var n = ${n} + 1;
			}
		}
	}

}