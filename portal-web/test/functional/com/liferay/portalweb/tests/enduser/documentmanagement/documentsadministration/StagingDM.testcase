@component-name = "portal-collaboration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Documents Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging DM Page");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging");

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");
	}

	@description = "This test covers LPS-126751. It ensures that a user cannot create empty document types or metadata sets."
	@priority = "4"
	@refactorneeded
	test AddCustomTypeWithoutFields {
		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "DM Document Type Name");

		DDLDataDefinition.save();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "Error:At least one field must be added.");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMNavigator.gotoMetadataSets();

		DMMetadataSet.addTitle(metadataSetName = "Document Metadata Set Name");

		DDLDataDefinition.save();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "Error:At least one field must be added.");
	}

	@description = "This is a use case for LPS-74621."
	@priority = "3"
	@refactorneeded
	test CommentDMDocumentOnLiveSite {
		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Documents and Media");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		LexiconEntry.changeDisplayStyle(displayStyle = "cards");

		DMDocument.gotoEntry(dmDocumentTitle = "DM Document Title");

		Comments.addPG(entryComment = "DM Document Comment");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		DMDocument.gotoEntry(dmDocumentTitle = "DM Document Title");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "DM Document Comment",
			userFullName = "Test Test (You)");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		DMDocument.gotoEntry(dmDocumentTitle = "DM Document Title");

		Comments.viewCommentReadOnly();

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging");

		Staging.deactivateStagingCP(siteName = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		LAR.exportPortlet(larFileName = "DM.portlet.lar");

		JSONGroup.addGroup(groupName = "Second Site");

		JSONLayout.addPublicLayout(
			groupName = "Second Site",
			layoutName = "DM Page");

		Navigator.openSiteURL(siteName = "Second Site");

		Portlet.addPG(portletName = "Documents and Media");

		Navigator.openSiteURL(siteName = "Second Site");

		LAR.importPortlet(larFileName = "DM.portlet.lar");

		Navigator.openSiteURL(siteName = "Second Site");

		DMDocument.gotoEntry(dmDocumentTitle = "DM Document Title");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "DM Document Comment",
			userFullName = "Test Test (You)");
	}

	@description = "This ensures that the document using custom document type can be deleted and republished."
	@priority = "5"
	@refactorneeded
	test DeleteDocumentWithCustomType {
		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			navTab = "Documents and Media",
			textField = "Text");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Document Title",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMDocument.deleteCP(dmDocumentTitle = "DM Document Title");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.viewDefaultCP();
	}

	@description = "This ensures that the document using custom document type can be edited and republished."
	@priority = "5"
	@refactorneeded
	test EditDocumentWithCustomType {
		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Image,Text",
			dmDocumentTypeName = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentFileName = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Document Title",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.viewCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Name",
			previewImage = "Document_1.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMDocument.editCP(
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentFileEdit = "Document_2.jpg",
			dmDocumentFileNameEdit = "Image_2.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Document Title Edit",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.viewCP(
			dmDocumentDescription = "DM Document Description Edit",
			dmDocumentTitle = "DM Document Title Edit",
			dmDocumentType = "DM Document Type Name",
			previewImage = "Image_2.jpg");
	}

	@description = "This is a use case for LPS-79925."
	@priority = "5"
	@refactorneeded
	test PublishDocumentFromRestrictedFolder {
		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		Refresh();

		DMFolder.addCP(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name");

		DMFolder.configureWorkflowCP(
			dmDocumentTypeName = "DM Document Type Name",
			dmFolderName = "DM Folder Name",
			workflowDefinition = "No Workflow",
			workflowRestriction = "Specific Restrictions");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder Name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.edit(
			dmDocumentTypeFieldRequiredEdit = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		AssertConsoleTextNotPresent(value1 = "DDMFormValuesValidationException");

		AssertConsoleTextNotPresent(value1 = "No value defined for field name");
	}

	@description = "This test covers LPS-119234. It ensures that a document type can be published to live via SAP."
	@priority = "4"
	@refactorneeded
	test PublishDocumentTypeViaSAP {
		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		Staging.publishViaSAP(
			confirmMessage = "Are you sure you want to publish to live?",
			entry = "DM Document Type Name");

		ProductMenu.gotoLiveSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMNavigator.gotoMetadataSets();

		AssertElementNotPresent(
			key_tableEntry = "DM Document Type Name",
			locator1 = "LexiconTable#TABLE_ENTRY_TITLE_LINK");

		DMNavigator.gotoDocumentType();

		DMDocumentType.viewCP(dmDocumentTypeName = "DM Document Type Name");
	}

	@description = "This ensures that the custom document type being used by document can be edited and republished."
	@priority = "5"
	@refactorneeded
	test PublishEditsToDocumentType {
		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Image",
			dmDocumentTypeName = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentFileName = "Image_1.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			imageField = "Document_1.jpg",
			navTab = "Documents and Media");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Document Title",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.viewCP(
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Name",
			previewImage = "Image_1.jpg");

		DMDocument.viewDocumentTypePG(imageName = "Document_1.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMNavigator.gotoDocumentType();

		DMDocumentType.edit(
			dmDocumentTypeFieldNameEdit = "Photo",
			dmDocumentTypeName = "DM Document Type Name",
			dmDocumentTypeNameEdit = "DM Document Type Name Edit",
			fieldFieldLabel = "Image",
			fieldFieldLabelEdit = "Photo");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMDocument.editCP(
			dmDocumentTitle = "DM Document Title",
			fieldFieldLabel = "Photo",
			imageFieldEdit = "Document_2.jpg",
			navTab = "Documents and Media");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Document Title",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.viewCP(
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Name Edit",
			previewImage = "Image_1.jpg");

		DMDocument.viewDocumentTypePG(
			fieldFieldLabel = "Photo",
			imageName = "Document_2.jpg");
	}

	@description = "This ensures that the document using custom document type and custom metadataset can be edited and republished."
	@priority = "5"
	@refactorneeded
	test PublishEditsToDocumentUsingCustomTypeAndSet {
		DMNavigator.gotoMetadataSets();

		DMMetadataSet.addTitle(metadataSetName = "Document Metadata Set Name");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		DDLDataDefinition.save();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMNavigator.gotoDocumentType();

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "DM Document Type Name");

		DMDocumentType.gotoTab(tabName = "Builder");

		DMDocumentType.gotoTab(tabName = "Additional Metadata Fields");

		DMDocumentType.selectPGMetadataSet(key_metadataSetName = "Document Metadata Set Name");

		DDLDataDefinition.save();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentFileName = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Document Title",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.viewCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Name",
			previewImage = "Document_1.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMNavigator.gotoDocumentType();

		DMDocumentType.viewCP(dmDocumentTypeName = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMDocument.editCP(
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentFileEdit = "Document_2.jpg",
			dmDocumentFileNameEdit = "Image_2.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Document Title Edit",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.viewCP(
			dmDocumentDescription = "DM Document Description Edit",
			dmDocumentTitle = "DM Document Title Edit",
			dmDocumentType = "DM Document Type Name",
			previewImage = "Image_2.jpg");
	}

	@description = "This ensures that the custom metadataset used in custom document type can be edited and republished."
	@priority = "5"
	@refactorneeded
	test PublishEditsToMetadataSet {
		DMNavigator.gotoMetadataSets();

		DMMetadataSet.addTitle(metadataSetName = "DM Metadata Set Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Numeric",
			dmDocumentTypeName = "DM Document Type Name",
			metadataSetName = "DM Metadata Set Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentFileName = "Document_1.doc",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			numericField = "123",
			textField = "DM Document Text");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Documents and Media");

		DMDocument.enableActionsMenuOnPortlet();

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFileName = "Document_1.doc",
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Name");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFileName = "Document_1.doc",
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Name");

		DMDocument.viewDocumentTypePG(
			numericValue = "123",
			textContent = "DM Document Text");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMNavigator.gotoMetadataSets();

		DMDocumentType.edit(
			dmDocumentTypeFieldNameEdit = "Company",
			dmDocumentTypeFieldRequiredEdit = "Company",
			dmDocumentTypeName = "DM Metadata Set Name",
			dmDocumentTypeNameEdit = "DM Metadata Set Name Edit",
			fieldFieldLabel = "Text",
			fieldFieldLabelEdit = "Company");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFileName = "Document_1.doc",
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Name");

		DMDocument.viewDocumentTypePG(
			numericValue = "123",
			textContent = "DM Document Text",
			textFieldLabel = "Company");
	}

	@description = "This test covers LPS-82539."
	@priority = "5"
	@refactorneeded
	test PublishFolderWithWorkflow {
		DMFolder.addCP(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder 1");

		DMFolder.configureWorkflowCP(
			dmFolderName = "DM Folder 1",
			workflowDefinition = "Single Approver",
			workflowRestriction = "Default Workflow");

		DMFolder.viewCP(dmFolderName = "DM Folder 1");

		DMDocument.addWithWorkflowCP(
			dmDocumentDescription = "DM Document in Folder 1",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document in Folder 1");

		AssertTextEquals(
			key_dmDocumentTitle = "DM Document in Folder 1",
			locator1 = "DocumentsAndMedia#ICON_DOCUMENT_WORKFLOW_STATUS",
			value1 = "Pending");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		Staging.publishViaSAP(
			confirmMessage = "Are you sure you want to publish the selected folder?",
			entry = "DM Folder 1");

		ProductMenu.gotoLiveSite(site = "Guest");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		AssertTextEquals(
			key_dmFolderName = "DM Folder 1",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_FOLDER_TITLE",
			value1 = "DM Folder 1");

		DMFolder.viewCP(dmFolderName = "DM Folder 1");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no documents or media files in this folder.");
	}

	@description = "This test covers LPS-82532. It ensures documents inside the subfolder that's being published to live are also published."
	@priority = "5"
	@refactorneeded
	test PublishSubfolderWithDocumentsViaSAP {
		property test.name.skip.portal.instance = "StagingDM#PublishSubfolderWithDocumentsViaSAP";

		DMFolder.addCP(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder 1");

		DMFolder.viewCP(dmFolderName = "DM Folder 1");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document in Folder 1",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document in Folder 1");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMFolder.viewCP(
			dmFolderName = "DM Folder 1",
			specificNameFolder = "true");

		DMFolder.addCP(dmFolderName = "DM Folder 2");

		DMFolder.viewCP(
			dmFolderName = "DM Folder 2",
			specificNameFolder = "true");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document in Folder 2",
			dmDocumentFile = "Document_2.txt",
			dmDocumentTitle = "DM Document in Folder 2");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMFolder.viewCP(dmFolderName = "DM Folder 1");

		DMFolder.viewCP(
			dmFolderName = "DM Folder 2",
			specificNameFolder = "true");

		DMFolder.addCP(dmFolderName = "DM Folder 3");

		DMFolder.viewCP(
			dmFolderName = "DM Folder 3",
			specificNameFolder = "true");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document in Folder 3",
			dmDocumentFile = "Document_3.txt",
			dmDocumentTitle = "DM Document in Folder 3");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		Staging.publishViaSAP(
			confirmMessage = "Are you sure you want to publish the selected folder?",
			entry = "DM Folder 1");

		ProductMenu.gotoLiveSite(site = "Guest");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		for (var folderCount : list "1,2,3") {
			DMFolder.viewCP(dmFolderName = "DM Folder ${folderCount}");

			DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document in Folder ${folderCount}");

			DMDocument.viewCP(dmDocumentTitle = "DM Document in Folder ${folderCount}");

			Navigator.gotoBack();
		}
	}

	@description = "This test covers LPS-99265. It ensures that a staged document file cannot be shared unless it is first published to Live."
	@priority = "4"
	@refactorneeded
	test ShareDMDocumentOnLiveSite {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Documents and Media");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		DMDocumentSharing.addDocumentWithOnlyOwnerPermissions(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		AssertClick(
			key_dmDocumentTitle = "DM Document Title",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "DM Document Title");

		AssertElementNotPresent(locator1 = "Button#SHARE_SIDENAV");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		DMNavigator.gotoShare(dmDocumentTitle = "DM Document Title");

		DMDocument.sharePG(
			shareable = "true",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "viewing",
			contentTitle = "DM Document Title",
			ownerName = "Test Test");
	}

	@description = "This ensures that the document info is displayed correctly after publishing and republishing."
	@priority = "5"
	@refactorneeded
	test ViewRepublishedDocumentInfo {
		ProductMenu.gotoPortlet(
			category = "Categorization",
			portlet = "Tags");

		Tag.addCP(tagName = "tag1");

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Documents and Media");

		DMDocument.enableActionsMenuOnPortlet();

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentFileName = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title",
			tagNameList = "tag1");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		var siteID = Site.getSiteId();

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		DMDocument.viewPG(
			averageRatingStarCount = "0.0",
			dmDocumentDescription = "DM Document Description",
			dmDocumentExtension = "jpg",
			dmDocumentFileName = "Document_1.jpg",
			dmDocumentFileType = "Image",
			dmDocumentFileTypeInfo = "Image",
			dmDocumentSize = "13 KB",
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "Basic Document",
			dmDocumentUploader = "Test Test",
			dmDocumentVersionNumber = "1.0",
			dmFolderName = "Home",
			locationFieldName = "true",
			tagNameList = "tag1");

		DMDocument.viewLatestVersionURL(
			dmDocumentFileName = "Document_1.jpg",
			siteID = "${siteID}");

		DMDocument.viewWebDAVURL(
			dmDocumentFileName = "Document_1.jpg",
			siteName = "site-name");

		DMDocument.viewDocumentMetadataCP(
			metadataData = "image/jpeg",
			metadataLabel = "Content Type");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMDocument.editCP(
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentFileEdit = "Document_3.png",
			dmDocumentFileNameEdit = "Document_3Edit.png",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		DMDocument.viewPG(
			averageRatingStarCount = "0.0",
			dmDocumentDescription = "DM Document Description Edit",
			dmDocumentExtension = "png",
			dmDocumentFileName = "Document_3Edit.png",
			dmDocumentFileType = "Image",
			dmDocumentFileTypeInfo = "Image",
			dmDocumentSize = "6 KB",
			dmDocumentTitle = "DM Document Title Edit",
			dmDocumentType = "Basic Document",
			dmDocumentUploader = "Test Test",
			dmDocumentVersionNumber = "2.0",
			dmFolderName = "Home",
			locationFieldName = "true",
			tagNameList = "tag1");

		DMDocument.viewLatestVersionURL(
			dmDocumentFileName = "Document_3Edit.png",
			siteID = "${siteID}");

		DMDocument.viewWebDAVURL(
			dmDocumentFileName = "Document_3Edit.png",
			siteName = "site-name");

		DMDocument.viewDocumentMetadataCP(
			metadataData = "image/png",
			metadataLabel = "Content Type");
	}

	@description = "This ensures that the image can be deleted and republished in web content."
	@priority = "4"
	@refactorneeded
	test ViewWebContentWithDeletedImage {
		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.jpg",
			dmDocumentTitle = "Document_2.jpg");

		Staging.publishViaSAP(
			confirmMessage = "Are you sure you want to publish the selected document?",
			entry = "Document_2.jpg");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		Button.clickSave();

		NavItem.click(navItem = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media",
			structureName = "WC Structure Name",
			webContentImage = "Document_2.jpg",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		WebContent.viewPGViaWCD(
			image = "true",
			key_image = "Document_2.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMDocument.deleteCP(dmDocumentTitle = "Document_2.jpg");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name-staging");

		RecycleBin.deleteCP(
			assetName = "Document_2.jpg",
			assetType = "Document");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		AssertElementNotPresent(
			key_image = "Document_2.jpg",
			locator1 = "WCD#WEB_CONTENT_CONTENT_IMAGE");
	}

	@description = "This ensures that the image can be edited and republished in web content."
	@priority = "4"
	@refactorneeded
	test ViewWebContentWithRepublishedImage {
		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.jpg",
			dmDocumentTitle = "Document_2.jpg");

		Staging.publishViaSAP(
			confirmMessage = "Are you sure you want to publish the selected document?",
			entry = "Document_2.jpg");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		Button.clickSave();

		NavItem.click(navItem = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media",
			structureName = "WC Structure Name",
			webContentImage = "Document_2.jpg",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		WebContent.viewPGViaWCD(
			image = "true",
			key_image = "Document_2.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMDocument.editCP(
			dmDocumentFileEdit = "Document_3.jpg",
			dmDocumentFileNameEdit = "Document_3.jpg",
			dmDocumentTitle = "Document_2.jpg",
			dmDocumentTitleEdit = "Document_3.jpg");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		WebContent.viewPGViaWCD(
			image = "true",
			key_image = "Document_3.jpg");
	}

}