@component-name = "portal-collaboration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Blogs";

	var pageName = "Blogs Page";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		Navigator.gotoPage(pageName = "Blogs Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			BlogsEntry.tearDownCP();

			Blogs.tearDownConfigurationScopePG(pageName = "Blogs Page");

			Organization.tearDownCP();

			PortalInstances.tearDownCP();

			Page.tearDownCP();

			Site.tearDownCP();
		}
	}

	@description = "This checks that the default abstract (appends to 400 characters) can display properly in the UI."
	@priority = "4"
	@refactordone
	test CanAddAbstractDisplayingFirst400Characters {
		property test.name.skip.portal.instance = "BlogsUsecase#CanAddAbstractDisplayingFirst400Characters";

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addWithDefaultAbstract(
			entryAbstractDescription = "Blogs Entry Custom Abstract",
			entryContent = "Liferay Portal provides an excellent platform for building web applications, websites, and portals, but it can additionally be used for a new category of web applications called social applications. The definition is simple: a social application is a web application that additionally leverages social identity, data, and features or services. In the left figure, the light blue squares represent a definition of a standard web application while the darker blue squares show the addition of social aspects.",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewAbstractDisplay(
			entryAbstractDescription = "Liferay Portal provides an excellent platform for building web applications, websites, and portals, but it can additionally be used for a new category of web applications called social applications. The definition is simple: a social application is a web application that additionally leverages social identity, data, and features or services. In the left figure, the light blue squares represent...",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.gotoEntryWithAbstractPG(
			entryAbstractDescription = "Liferay Portal provides an excellent platform for building web applications, websites, and portals, but it can additionally be used for a new category of web applications called social applications. The definition is simple: a social application is a web application that additionally leverages social identity, data, and features or services. In the left figure, the light blue squares represent...",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Liferay Portal provides an excellent platform for building web applications, websites, and portals, but it can additionally be used for a new category of web applications called social applications. The definition is simple: a social application is a web application that additionally leverages social identity, data, and features or services. In the left figure, the light blue squares represent a definition of a standard web application while the darker blue squares show the addition of social aspects.",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This test checks that an inline image can be added to a blog."
	@priority = "4"
	@refactorneeded
	test CanAddEntryWithInlineImage {
		BlogsNavigator.openToAddEntry(siteURLKey = "guest");

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title");

		BlogsEntry.addContentWithInlineImage(
			entryContent = "Blogs Entry Content",
			navTab = "Upload Image",
			uploadFileName = "Document_1.jpg");

		PortletEntry.publish();

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewInlineImage(uploadFileName = "Document_1");
	}

	@description = "This test checks that HTML is rendered in the blog content field."
	@priority = "4"
	@refactordone
	test CanAddHTMLToContentField {
		JSONBlog.addEntry(
			entryContent = "<b>Bold Type</b> <i>Italics</i>",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.viewEntryPG(
			entryContentBold = "Bold Type",
			entryContentItalics = "Italics",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This test checks that blog entry can be added with special charaters."
	@priority = "5"
	@refactordone
	test CanAddWithSpecialCharacters {
		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = '''Blogs Entry Content `~!@#$%^&*(){}[],.<>/?|''',
			entryTitle = '''Blogs Entry Title `~!@#$%^&*(){}[],.<>/?|''');

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = '''Blogs Entry Content `~!@#$%^&*(){}[],.<>/?|''',
			entryTitle = '''Blogs Entry Title `~!@#$%^&*(){}[],.<>/?|''');

		BlogsEntry.viewPG(
			entryContent = '''Blogs Entry Content `~!@#$%^&*(){}[],.<>/?|''',
			entryTitle = '''Blogs Entry Title `~!@#$%^&*(){}[],.<>/?|''');
	}

	@description = "This checks that a user can change the publish date for a scheduled entry to the present and publish it."
	@priority = "4"
	@refactorneeded
	test CanChangeAScheduledEntryToThePresentAndPublish {
		property test.name.skip.portal.instance = "BlogsUsecase#CanChangeAScheduledEntryToThePresentAndPublish";

		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.editDisplayDateYear();

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Page");

		Navigator.gotoNavItem(navItem = "Not Published (1)");

		BlogsNavigator.gotoEditPG(entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.editDisplayDate(displayTimeMinute = "00");

		PortletEntry.publish();

		PortletEntry.viewNoNavItemLink();

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This test covers LPS-127212 and LPS-128781. This ensures that a blog title can be imported to a site when a duplicate title already exists."
	@priority = "4"
	@refactorneeded
	test CanImportBlogWhenDuplicateTitleExists {
		JSONGroup.addGroup(groupName = "Target Site Name");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Target Site Name");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Target Site Name");

		JSONGroup.addGroup(groupName = "Source Site Name");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Source Site Name");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "source-site-name");

		LAR.exportPortlet(larFileName = "Blogs.portlet.lar");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "target-site-name");

		LAR.importPortlet(larFileName = "Blogs.portlet.lar");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "target-site-name");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		for (var i : list "1,2,3") {
			AssertTextEquals(
				key_rowNumber = "${i}",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD_2",
				value1 = "Blogs Entry Title");
		}
	}

	@description = "This checks that a blog entry with a comment can be imported with no data loss."
	@priority = "4"
	@refactorneeded
	test CanImportEntryWithComment {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.addPG(entryComment = "Blogs Entry Comment");

		Navigator.gotoPage(pageName = "Blogs Page");

		LAR.exportPortlet(larFileName = "Blogs.portlet.lar");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.tearDownCP();

		Navigator.gotoPage(pageName = "Blogs Page");

		LAR.importPortlet(larFileName = "Blogs.portlet.lar");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "Blogs Entry Comment",
			userFullName = "Test Test");
	}

	@description = "This checks that a custom blog abstracted can be viewed from the site page."
	@priority = "4"
	@refactordone
	test CanViewCustomAbstractOnSitePage {
		property test.name.skip.portal.instance = "BlogsUsecase#CanViewCustomAbstractOnSitePage";

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addWithCustomAbstract(
			entryAbstractDescription = "Blogs Entry Custom Abstract",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewAbstractDisplay(
			entryAbstractDescription = "Blogs Entry Custom Abstract",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.gotoEntryWithAbstractPG(
			entryAbstractDescription = "Blogs Entry Custom Abstract",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This test covers LPS-102033. It ensures that the comment only appears under the respective Blog Entry."
	@priority = "3"
	@refactorneeded
	test CommentsAreViewableInAP {
		JSONLayout.deletePublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Asset Publisher Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Asset Publisher Page",
			widgetName = "Asset Publisher");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content 1",
			entryTitle = "Blogs Entry Title 1");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content 2",
			entryTitle = "Blogs Entry Title 2");

		Navigator.gotoPage(pageName = "Asset Publisher Page");

		AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Comments");

		Navigator.gotoPage(pageName = "Asset Publisher Page");

		Comments.addPG(entryComment = "Blogs Entry Title 2 Comment");

		Navigator.gotoPage(pageName = "Asset Publisher Page");

		BlogsEntry.viewEntryViaAPPG(
			assetTitle = "Blogs Entry Title 1",
			entryContent = "Blogs Entry Content 1",
			entryTitle = "Blogs Entry Title 1");

		Comments.viewNoPG(
			entryComment = "Blogs Entry Title 2 Comment",
			userFullName = "Test Test");

		Navigator.gotoPage(pageName = "Asset Publisher Page");

		BlogsEntry.viewEntryViaAPPG(
			assetTitle = "Blogs Entry Title 2",
			entryContent = "Blogs Entry Content 2",
			entryTitle = "Blogs Entry Title 2");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "Blogs Entry Title 2 Comment",
			userFullName = "Test Test");
	}

	@priority = "4"
	@refactorneeded
	test DemoTrackbackURL {
		property custom.properties = "blogs.trackback.enabled=true";
		property dummy.socket.proxy.disabled = "true";
		property test.name.skip.portal.instance = "BlogsUsecase#DemoTrackbackURL";

		JSONBlog.addEntry(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.addWithTrackbackURLPG(
			entryContent = "Blogs Entry1 Content",
			entryContent2 = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry1 Title",
			entryTitle2 = "Blogs Entry2 Title",
			pageName = "Blogs Page");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry1 Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "[...] Blogs Entry2 Content [...] Read More",
			userFullName = "Test Test");

		AssertClick(
			locator1 = "Link#READ_MORE",
			value1 = "Read More");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry2 Title");

		HeadlessPortalInstanceAPI.addPortalInstance(
			domain = "www.able.com",
			portalInstanceId = "www.able.com",
			virtualHost = "www.able.com");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@www.able.com",
			virtualHostsURL = "http://www.able.com:8080");

		SitePages.openPagesAdmin(
			baseURL = "http://www.able.com:8080",
			siteURLKey = "guest");

		SitePages.addPublicPage(pageName = "Blogs Page");

		Navigator.gotoSpecificURLPage(
			pageName = "Blogs Page",
			url = "http://www.able.com:8080");

		Portlet.addPG(
			pageName = "Blogs Page",
			portletName = "Blogs");

		Navigator.gotoSpecificURLPage(
			pageName = "Blogs Page",
			url = "http://www.able.com:8080");

		Blogs.addEntry(
			entryContent = "Blogs Entry3 Content",
			entryTitle = "Blogs Entry3 Title");

		var key_entryContent = "Blogs Entry3 Content";
		var key_entryTitle = "Blogs Entry3 Title";

		AssertClick.assertPartialTextClickAt(
			locator1 = "Blogs#ENTRY_COMMENTS_COUNT",
			value1 = "0");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry3 Content",
			entryTitle = "Blogs Entry3 Title");

		AssertTextEquals.assertValue(
			locator1 = "BlogsEntry#COMMENTS_TRACKBACK_URL",
			value1 = "http://www.able.com:8080/web/guest/blogs-page/-/blogs/trackback/blogs-entry3-title");

		Navigator.gotoSpecificURLPage(
			pageName = "Blogs Page",
			url = "http://www.able.com:8080");

		BlogsEntry.addWithTrackbackURLPG(
			entryContent = "Blogs Entry3 Content",
			entryContent2 = "Blogs Entry4 Content",
			entryTitle = "Blogs Entry3 Title",
			entryTitle2 = "Blogs Entry4 Title",
			pageName = "Blogs Page",
			siteName = "http://www.able.com:8080",
			virtualHosts = "true",
			virtualHostsURL = "www.able.com:8080");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry4 Content",
			entryTitle = "Blogs Entry4 Title");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry3 Content",
			entryTitle = "Blogs Entry3 Title");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "[...] Blogs Entry4 Content [...] Read More",
			entryContent = "Blogs Entry3 Content",
			entryTitle = "Blogs Entry3 Title",
			userFullName = "Test Test");

		AssertTextEquals.assertValue(
			locator1 = "BlogsEntry#COMMENTS_TRACKBACK_URL",
			value1 = "http://www.able.com:8080/web/guest/blogs-page/-/blogs/trackback/blogs-entry3-title");

		AssertClick(
			locator1 = "Link#READ_MORE",
			value1 = "Read More");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry4 Content",
			entryTitle = "Blogs Entry4 Title");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@www.able.com",
			virtualHostsURL = "http://www.able.com:8080");

		Navigator.gotoSpecificURLPage(
			pageName = "Blogs Page",
			url = "http://www.able.com:8080");

		Blogs.addEntry(
			entryContent = "Blogs Entry5 Content",
			entryTitle = "Blogs Entry5 Title");

		var key_entryContent = "Blogs Entry5 Content";
		var key_entryTitle = "Blogs Entry5 Title";

		AssertClick.assertPartialTextClickAt(
			locator1 = "Blogs#ENTRY_COMMENTS_COUNT",
			value1 = "0");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry5 Content",
			entryTitle = "Blogs Entry5 Title");

		AssertTextEquals.assertValue(
			locator1 = "BlogsEntry#COMMENTS_TRACKBACK_URL",
			value1 = "http://www.able.com:8080/web/guest/blogs-page/-/blogs/trackback/blogs-entry5-title");

		Navigator.gotoSpecificURLPage(
			pageName = "Blogs Page",
			url = "http://www.able.com:8080");

		BlogsEntry.addWithTrackbackURLPG(
			entryContent = "Blogs Entry5 Content",
			entryContent2 = "Blogs Entry6 Content",
			entryTitle = "Blogs Entry5 Title",
			entryTitle2 = "Blogs Entry6 Title",
			pageName = "Blogs Page",
			virtualHosts = "true",
			virtualHostsURL = "http://www.able.com:8080");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry6 Content",
			entryTitle = "Blogs Entry6 Title");

		BlogsNavigator.gotoPG(
			entryContent = "Blogs Entry5 Content",
			entryTitle = "Blogs Entry5 Title");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "[...] Blogs Entry6 Content [...] Read More",
			userFullName = "Test Test");

		AssertTextEquals.assertValue(
			locator1 = "BlogsEntry#COMMENTS_TRACKBACK_URL",
			value1 = "http://www.able.com:8080/web/guest/blogs-page/-/blogs/trackback/blogs-entry5-title");

		AssertClick(
			locator1 = "Link#READ_MORE",
			value1 = "Read More");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry6 Content",
			entryTitle = "Blogs Entry6 Title");
	}

	@description = "This test covers LPS-102199. This ensures that the user can search for a pending blog entry."
	@priority = "3"
	@refactorneeded
	test SearchForPendingBlogsEntry {
		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Workflow");

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Blogs Entry");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addWithWorkflow(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsEntry.viewWithWorkflowCP(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		BlogsEntry.searchCP(
			entryContent = "Blogs Entry Content",
			entrySearchTerm = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This test covers LPS-128451. It ensures that a blog entry can be published normally with xss code injected title."
	@priority = "4"
	@refactordone
	test TitleWillNotExecuteXSS {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = '''"><img src=xss onerror=alert(1)>''',
			entryTitle = '''"><img src=xss onerror=alert(1)>''',
			injectCode = "true");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = '''"><img src=xss onerror=alert(1)>''');

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entrySubtitle = '''"><img src=xss onerror=alert(1)>''',
			entryTitle = '''"><img src=xss onerror=alert(1)>''');
	}

	@priority = "3"
	@refactorneeded
	test ViewBlogsEntryFriendlyURLViaBlogsPortletAndRecentBloggers {
		property test.name.skip.portal.instance = "BlogsUsecase#ViewBlogsEntryFriendlyURLViaBlogsPortletAndRecentBloggers";

		var portalURL = PropsUtil.get("portal.url");
		var entryAuthor = "Test Test";
		var entryContent = "Blogs Entry Content";
		var entryTitle = "Blogs Entry Title";
		var entryTitleURL = StringUtil.replace("Blogs Entry Title", " ", "-");
		var entryTitleURL = StringUtil.lowerCase("${entryTitleURL}");
		var pageNameURL = StringUtil.replace("Blogs Page", " ", "-");
		var pageNameURL = StringUtil.lowerCase("${pageNameURL}");
		var friendlyURL = "${portalURL}/web/guest/${pageNameURL}/-/blogs/${entryTitleURL}";

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		Navigator.openSpecificURL(url = "${friendlyURL}");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Recent Bloggers Page");

		Navigator.gotoPage(pageName = "Recent Bloggers Page");

		Portlet.addPG(portletName = "Recent Bloggers");

		var key_entryAuthor = "Test Test";

		AssertClick(
			locator1 = "Blogs#RECENT_BLOGGER_USER_NAME",
			value1 = "Test Test");

		AssertLocation(value1 = "${friendlyURL}");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "4"
	@refactorneeded
	test ViewBlogsEntryOnMultiplePagesWithDefaultAndPageScope {
		property test.name.skip.portal.instance = "BlogsUsecase#ViewBlogsEntryOnMultiplePagesWithDefaultAndPageScope";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page2");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page2",
			widgetName = "Blogs");

		Navigator.gotoPage(pageName = "Blogs Page2");

		Portlet.selectScopePG(
			portletName = "Blogs",
			scope = "Blogs Page2");

		Navigator.gotoPage(pageName = "Blogs Page2");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewNoPG(entryTitle = "Blogs Entry Title");

		Navigator.openURL();

		ProductMenu.gotoScopedPortlet(
			category = "Content &amp; Data",
			portlet = "Blogs",
			scope = "Blogs Page2");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		BlogsEntry.viewEntryTable(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryAuthorCP(
			entryAuthorFullName = "Test Test",
			entryTitle = "Blogs Entry Title");

		var key_entryTitle = "Blogs Entry Title";

		AssertClick(
			locator1 = "Blogs#ENTRY_TABLE_TITLE",
			value1 = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewNoPG(entryTitle = "Blogs Entry Title");

		Portlet.gotoPortletOptions(
			portletName = "Blogs",
			portletOption = "Configuration");

		BlogsConfiguration.selectConfigurationIFrame();

		BlogsNavigator.gotoConfigurationScopePG();

		BlogsConfiguration.viewScopeSelection(scopeSelection = "${siteName}");

		Navigator.gotoPage(pageName = "Blogs Page");

		Portlet.selectScopePG(
			portletName = "Blogs",
			scope = "Blogs Page2");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "3"
	@refactorneeded
	test ViewBlogsEntryWithCoverImageFromDMFolders {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMFolder.addPG(
			dmFolderDescription = "DM Folder 1 Description",
			dmFolderName = "DM Folder 1 Name");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder 1 Name");

		DMFolder.addPG(
			dmFolderDescription = "DM SubFolder 1 Description",
			dmFolderName = "DM SubFolder 1 Name");

		DMNavigator.gotoFolder(dmFolderName = "DM SubFolder 1 Name");

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "Document_1.jpg");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMFolder.addPG(
			dmFolderDescription = "DM Folder 2 Description",
			dmFolderName = "DM Folder 2 Name");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder 2 Name");

		DMFolder.addPG(
			dmFolderDescription = "DM SubFolder 2 Description",
			dmFolderName = "DM SubFolder 2 Name");

		DMNavigator.gotoFolder(dmFolderName = "DM SubFolder 2 Name");

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.jpg",
			dmDocumentTitle = "Document_2.jpg");

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntryWithCoverImageFromDMFolders(
			dmFolderName = "DM Folder 1 Name",
			dmSubFolderName = "DM SubFolder 1 Name",
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title",
			imageFileName = "Document_1.jpg",
			navTab = "Documents and Media");

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntryWithCoverImageFromDMFolders(
			dmFolderName = "DM Folder 2 Name",
			dmSubFolderName = "DM SubFolder 2 Name",
			entryContent = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry2 Title",
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry1 Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		AssertElementPresent(
			key_uploadFileName = "Document_1",
			locator1 = "BlogsEntry#ENTRY_COVER_IMAGE");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry2 Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		AssertElementPresent(
			key_uploadFileName = "Document_2",
			locator1 = "BlogsEntry#ENTRY_COVER_IMAGE");
	}

	@priority = "4"
	@refactorneeded
	test ViewBlogsEntryWithDefaultAbstract {
		property test.name.skip.portal.instance = "BlogsUsecase#ViewBlogsEntryWithDefaultAbstract";

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addWithDefaultAbstract(
			entryAbstractDescription = "Blogs Entry Custom Abstract",
			entryContent = "Liferay Portal provides an excellent platform for building web applications, websites, and portals, but it can additionally be used for a new category of web applications called social applications. The definition is simple: a social application is a web application that additionally leverages social identity, data, and features or services. In the left figure, the light blue squares represent a definition of a standard web application while the darker blue squares show the addition of social aspects.",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewAbstractDisplay(
			entryAbstractDescription = "Liferay Portal provides an excellent platform for building web applications, websites, and portals, but it can additionally be used for a new category of web applications called social applications. The definition is simple: a social application is a web application that additionally leverages social identity, data, and features or services. In the left figure, the light blue squares represent...",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.gotoEntryWithAbstractPG(
			entryAbstractDescription = "Liferay Portal provides an excellent platform for building web applications, websites, and portals, but it can additionally be used for a new category of web applications called social applications. The definition is simple: a social application is a web application that additionally leverages social identity, data, and features or services. In the left figure, the light blue squares represent...",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Liferay Portal provides an excellent platform for building web applications, websites, and portals, but it can additionally be used for a new category of web applications called social applications. The definition is simple: a social application is a web application that additionally leverages social identity, data, and features or services. In the left figure, the light blue squares represent a definition of a standard web application while the darker blue squares show the addition of social aspects.",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This test covers LPS-106613. It ensures that the custom abstract can be added and edited."
	@priority = "4"
	@refactorneeded
	test ViewBlogsEntryWithEditedCustomAbstract {
		property test.name.skip.portal.instance = "BlogsUsecase#ViewBlogsEntryWithCustomAbstract";

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addWithCustomAbstract(
			entryAbstractDescription = "Blogs Entry Custom Abstract",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewAbstractDisplay(
			entryAbstractDescription = "Blogs Entry Custom Abstract",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.gotoEntryWithAbstractPG(
			entryAbstractDescription = "Blogs Entry Custom Abstract",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEditCP(entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.addCustomAbstract(entryAbstractDescription = "Blogs Entry Custom AbstractEdit");

		Type(
			key_editor = "content",
			locator1 = "AlloyEditor#EDITOR",
			value1 = "Blogs Entry Content Edit");

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewAbstractDisplay(
			entryAbstractDescription = "Blogs Entry Custom AbstractEdit",
			entryContent = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "3"
	@refactorneeded
	test ViewBlogsEntryWithFutureDisplayDateViaBlogsAggregator {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Aggregator Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Aggregator Page",
			widgetName = "Blogs Aggregator");

		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.scheduleBlogEntry();

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Page");

		Navigator.gotoNavItem(navItem = "Not Published (1)");

		BlogsNavigator.gotoEditPG(entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.addCustomAbstract(entryAbstractDescription = "Blogs Entry Abstract Description");

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Aggregator Page");

		BlogsEntry.viewNoEntryViaBlogsAggregatorPG();

		User.logoutPG();

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewNoEntryAsGuestPG(entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Aggregator Page");

		BlogsEntry.viewNoEntryViaBlogsAggregatorPG();

		Pause(locator1 = "180000");

		Navigator.gotoPage(pageName = "Blogs Aggregator Page");

		AssertTextEquals(
			locator1 = "Portlet#H2_HEADER",
			value1 = "Blogs Aggregator");

		var key_entryAbstractDescription = "Blogs Entry Abstract Description";
		var key_entryTitle = "Blogs Entry Title";

		AssertTextEquals(
			locator1 = "BlogsAggregator#ENTRY_TITLE",
			value1 = "Blogs Entry Title");

		AssertTextEquals(
			locator1 = "BlogsEntry#CONTENT_ABSTRACT",
			value1 = "Blogs Entry Abstract Description");

		AssertClick(
			locator1 = "BlogsAggregator#ENTRY_TITLE",
			value1 = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoPage(pageName = "Blogs Aggregator Page");

		AssertTextEquals(
			locator1 = "Portlet#H2_HEADER",
			value1 = "Blogs Aggregator");

		AssertTextEquals(
			locator1 = "BlogsEntry#CONTENT_ABSTRACT",
			value1 = "Blogs Entry Abstract Description");

		AssertClick(
			locator1 = "BlogsAggregator#ENTRY_TITLE",
			value1 = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "4"
	@refactorneeded
	test ViewParentOrganizationViaSelectOrganizationInBlogsConfiguration {
		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs Aggregator");

		Navigator.gotoPage(pageName = "Blogs Page");

		Portlet.gotoPortletOptions(
			portletName = "Blogs Aggregator",
			portletOption = "Configuration");

		Portlet.viewTitle(portletName = "Blogs Aggregator");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		Navigator.gotoNavItem(navItem = "Setup");

		AssertClick(
			locator1 = "Button#SELECT",
			value1 = "Select");

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		AssertElementPresent(locator1 = "Message#EMPTY_INFO");

		IFrame.closeFrame();

		for (var orgName : list "1,2,3") {
			JSONOrganization.addOrganization(organizationName = "Organization${orgName} Name");
		}

		User.openUsersAdmin();

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.searchCP(
			orgName = "Organization3 Name",
			searchTerm = "Organization3 Name");

		Organization.selectParentOrganizationCP(
			orgName = "Organization3 Name",
			parentOrgName = "Organization1 Name");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.viewParentOrganizationCP(
			orgName = "Organization3 Name",
			parentOrgName = "Organization1 Name",
			subOrgName = "Organization3 Name");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.viewParentOrganizationCP(orgName = "Organization2 Name");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsAggregatorPortlet.viewParentOrganizationPG(
			orgName = "Organization2 Name",
			parentOrgName = "",
			portletName = "Blogs Aggregator");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsAggregatorPortlet.viewParentOrganizationPG(
			orgName = "Organization3 Name",
			parentOrgName = "Organization1 Name",
			portletName = "Blogs Aggregator");
	}

}