@component-name = "portal-web-forms-and-data-lists"
definition {

	property custom.properties = "minifier.enabled=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Forms";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content &amp; Data",
				portlet = "Forms");

			FormsAdmin.teardownForms();

			Page.tearDownCP();
		}
	}

	@description = "Verify that a Select From List Field can be created"
	@priority = "5"
	test CanBeCreated {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Select from List");

		FormFields.editOptionsRow(
			optionName = "Option1",
			optionValue = "Option 1",
			rowNumber = "1");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		FormsAdminNavigator.gotoEditField(fieldName = "Select from List");

		FormFields.viewOptionsRowFieldValue(
			fieldValue = "Option 1",
			rowNumber = "1");
	}

	@description = "Verify that a Select From List Field can be deleted"
	@priority = "5"
	test CanBeDeleted {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Select from List");

		FormFields.editOptionsRow(
			optionName = "Option1",
			optionValue = "Option 1",
			rowNumber = "1");

		FormViewBuilder.closeSidebar();

		Form.addTextField(fieldPositionNumber = "1");

		FormViewBuilder.closeSidebar();

		FormsAdminNavigator.gotoDeleteField(
			fieldLabel = "Select from List",
			fieldName = "Select from List");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		FormFields.viewDeletedFieldLabel(fieldName = "Select from List");
	}

	@description = "Verify that a Select From List Field can be duplicated"
	@priority = "5"
	test CanBeDuplicated {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Select from List");

		FormFields.editOptionsRow(
			optionName = "Option1",
			optionValue = "Option 1");

		FormFields.duplicateField();

		Form.save();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		FormViewBuilder.validateFieldLabel(fieldLabel = "Select from List");

		FormViewBuilder.validateFieldLabel(fieldLabel = "Copy of Select from List");

		FormFields.viewSelectLabel(
			fieldLabel = "Copy of Select from List",
			fieldName = "Copy of Select from List");
	}

	@description = "Verify that a Select From List Field can be edited"
	@ignore = "Test Stub"
	@priority = "5"
	test CanBeEdited {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131358 CanBeEdited pending implementation

	}

	@description = "Verify that a Select From List Field can be required"
	@ignore = "Test Stub"
	@priority = "5"
	test CanBeRequired {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131360 CanBeRequired pending implementation

	}

	@description = "Verify that a Select From List Field can be set to repeatable"
	@ignore = "Test Stub"
	@priority = "5"
	test CanBeSetAsRepeatable {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131362 CanBeSetAsRepeatable pending implementation

	}

	@description = "Verify that a Form can be submitted with the Select From List Field"
	@priority = "5"
	test CanBeSubmitted {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Select from List");

		FormFields.editOptionsRow(
			optionName = "Option1",
			optionValue = "Option 1",
			rowNumber = "1");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.selectSelectOption(
			fieldName = "Select from List",
			selectOption = "Option 1");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdminNavigator.gotoView();

		FormViewBuilder.validatePredefinedSelectList(
			fieldName = "Select from List",
			fieldValue = "Option 1");
	}

	@description = "Verify that a list can be created using Autofill"
	@ignore = "Test Stub"
	@priority = "5"
	test CanCreateListUsingAutofill {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131376 CanCreateListUsingAutofill pending implementation

	}

	@description = "Verify that changes to a Field can be canceled"
	@ignore = "Test Stub"
	@priority = "4"
	test ChangesCanBeCanceled {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131364 ChangesCanBeCanceled pending implementation

	}

	@description = "Verify that the Field References for the options can be edited"
	@priority = "5"
	test FieldReferenceOfOptionsCanBeEdited {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Select from List");

		FormFields.editOptionsRowValueOrFieldReference(
			fieldReference = "Option1234",
			optionValue = "Option 1",
			rowNumber = "1");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		FormsAdminNavigator.gotoEditField(fieldName = "Select from List");

		FormFields.viewOptionsRowFieldValueOrFieldReference(
			fieldReference = "Option1234",
			fieldValue = "Option 1",
			rowNumber = "1");
	}

	@description = "Verify that a Help Text can be added"
	@priority = "5"
	test HelpTextCanBeAdded {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Select from List");

		FormFields.addSingleSelectionOption(
			optionName = "Option 1",
			optionValue = "1");

		FormViewBuilder.setFieldHelpText(fieldLabel = "Help Text Test");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form1");

		FormFields.viewFieldHelpText(fieldHelpText = "Help Text Test");
	}

	@description = "Verify that the Field Label can be edited"
	@priority = "5"
	test LabelCanBeEdited {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Select from List");

		FormFields.editOptionsRow(
			optionName = "Option1",
			optionValue = "Option 1");

		Form.editFieldLabelMetal(fieldValue = "Test Select From List");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form1");

		FormViewBuilder.validateFieldLabel(fieldLabel = "Test Select From List");
	}

	@description = "Veriy that the Field Label can be hidden"
	@priority = "5"
	test LabelCanBeHidden {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Select from List");

		FormFields.editOptionsRow(
			optionName = "Option1",
			optionValue = "Option 1");

		FormViewBuilder.validateFieldLabel(fieldLabel = "Select from List");

		Form.gotoAdvancedTab();

		FormViewBuilder.clickShowLabel();

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form1");

		FormViewBuilder.validateFieldLabelIsNotShown(fieldLabel = "Select from List");
	}

	@description = "Verify that options can be added"
	@ignore = "Test Stub"
	@priority = "5"
	test OptionsCanBeAdded {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131373 OptionsCanBeAdded pending implementation

	}

	@description = "Verify that options can be rearranged"
	@priority = "5"
	test OptionsCanBeRearranged {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Select from List");

		FormFields.editOptionsRow(
			optionName = "Option1",
			optionValue = "Option 1");

		FormFields.editOptionsRow(
			optionName = "Option2",
			optionValue = "Option 2",
			rowNumber = "2");

		FormFields.moveOptionsRow(
			rowNumberEnd = "1",
			rowNumberStart = "2");

		Form.save();

		FormsAdminNavigator.gotoPreviewForm();

		Form.viewSelectFromListOptionOnPreview(
			fieldName = "Option 2",
			rowPosition = "1");

		Form.viewSelectFromListOptionOnPreview(
			fieldName = "Option 1",
			rowPosition = "2");
	}

	@description = "Verify that options can be sorted alphabetically"
	@priority = "5"
	test OptionsCanBeSortedAlphabetically {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Select from List");

		FormFields.editOptionsRow(
			optionName = "Option1",
			optionValue = "Option A",
			rowNumber = "1");

		FormFields.editOptionsRow(
			optionName = "Option2",
			optionValue = "Option C",
			rowNumber = "2");

		FormFields.editOptionsRow(
			optionName = "Option3",
			optionValue = "Option B",
			rowNumber = "3");

		Form.gotoAdvancedTab();

		FormViewBuilder.checkSwitcher(propertyName = "alphabeticalOrder");

		Form.save();

		FormsAdminNavigator.gotoPreviewForm();

		Navigator.selectSpecificWindow(windowTitle = "Form - Forms");

		Click(
			key_fieldName = "Select from List",
			locator1 = "FormFields#SELECT_FIELD");

		var iterator = "1";

		for (var option : list "A,B,C") {
			Form.viewSelectFromListOptionOnPreview(
				optionValue = "Option ${option}",
				rowPosition = "${iterator}");

			iterator = MathUtil.sum("${iterator}", "1");
		}
	}

	@description = "Verify that an option can be selected as a Predefined Value"
	@ignore = "Test Stub"
	@priority = "5"
	test PredefinedValueCanBeAdded {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131370 PredefinedValueCanBeAdded pending implementation

	}

	@description = "Verify that after deleting an option that had been selected as the Predefined Value, the Predefined Value is reset to "Choose Options""
	@ignore = "Test Stub"
	@priority = "5"
	test PredefinedValueIsResetWhenSelectedOptionIsDeleted {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131371 PredefinedValueIsResetWhenSelectedOptionIsDeleted pending implementation

	}

	@description = "Verify that the Field Reference can be Edited"
	@ignore = "Test Stub"
	@priority = "5"
	test ReferenceCanBeEdited {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131368 ReferenceCanBeEdited pending implementation

	}

	@description = "Verify that the Field Type can be changed"
	@ignore = "Test Stub"
	@priority = "5"
	test TypeCanBeChanged {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131363 TypeCanBeChanged pending implementation

	}

}