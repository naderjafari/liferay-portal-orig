@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name",
			widgetName = "Search Bar");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name",
			widgetName = "Search Results");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONCategory.addVocabulary(
			groupName = "Test Depot Name",
			site = "false",
			title = "Vocabulary Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");

			Site.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that a depot category can be used to search for assets stored in the connected site."
	@priority = "5"
	test AssetsCanBeSearchedByCategory {
		var categoryId = JSONCategory.addCategory(
			groupName = "Test Depot Name",
			site = "false",
			title = "depot",
			vocabularyName = "Vocabulary Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONWiki.addWikiPage(
			assetCategoryIds = "${categoryId}",
			groupName = "Site Name",
			wikiNodeName = "Main",
			wikiPageContent = "Wiki Page Content",
			wikiPageName = "Wiki Page Name");

		JSONMBMessage.addMessage(
			assetCategoryIds = "${categoryId}",
			groupName = "Site Name",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		JSONKnowledgeBase.addkBArticle(
			assetCategoryIds = "${categoryId}",
			groupName = "Site Name",
			kbArticleContent = "Knowledge Base Article Content",
			kbArticleTitle = "Knowledge Base Article Title");

		JSONWebcontent.addWebContent(
			assetCategoryIds = "${categoryId}",
			content = "WC WebContent Content",
			groupName = "Site Name",
			title = "WC WebContent Title");

		JSONBlog.addEntry(
			assetCategoryIds = "${categoryId}",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name");

		JSONDocument.addFileWithUploadedFile(
			assetCategoryIds = "${categoryId}",
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Site Name",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		Navigator.gotoSitePage(
			pageName = "Page Name",
			siteName = "Site Name");

		Search.searchCP(searchTerm = "depot");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "MB Thread Message Subject",
			searchAssetType = "Message Boards Message");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Knowledge Base Article Title",
			searchAssetType = "Knowledge Base Article");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Wiki Page Name",
			searchAssetType = "Wiki Page");
	}

	@description = "This ensures that assets stored in a site can be searched by a depot category after disconnecting the site."
	@priority = "4"
	test AssetsCanBeSearchedByCategoryFromDisconnectedSite {
		var categoryId = JSONCategory.addCategory(
			groupName = "Test Depot Name",
			site = "false",
			title = "depot",
			vocabularyName = "Vocabulary Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONWiki.addWikiPage(
			assetCategoryIds = "${categoryId}",
			groupName = "Site Name",
			wikiNodeName = "Main",
			wikiPageContent = "Wiki Page Content",
			wikiPageName = "Wiki Page Name");

		JSONMBMessage.addMessage(
			assetCategoryIds = "${categoryId}",
			groupName = "Site Name",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		JSONKnowledgeBase.addkBArticle(
			assetCategoryIds = "${categoryId}",
			groupName = "Site Name",
			kbArticleContent = "Knowledge Base Article Content",
			kbArticleTitle = "Knowledge Base Article Title");

		JSONWebcontent.addWebContent(
			assetCategoryIds = "${categoryId}",
			content = "WC WebContent Content",
			groupName = "Site Name",
			title = "WC WebContent Title");

		JSONBlog.addEntry(
			assetCategoryIds = "${categoryId}",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name");

		JSONDocument.addFileWithUploadedFile(
			assetCategoryIds = "${categoryId}",
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Site Name",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		JSONDepot.disconnectSite(groupName = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Page Name",
			siteName = "Site Name");

		Search.searchCP(searchTerm = "depot");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "MB Thread Message Subject",
			searchAssetType = "Message Boards Message");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Knowledge Base Article Title",
			searchAssetType = "Knowledge Base Article");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Wiki Page Name",
			searchAssetType = "Wiki Page");
	}

	@description = "This test covers LPS-131774. It ensures that a depot category can be viewed through details info on a connected site."
	@priority = "4"
	test CategoryCanBeViewedFromInfoPanel {
		var categoryId = JSONCategory.addCategory(
			groupName = "Test Depot Name",
			site = "false",
			title = "apple",
			vocabularyName = "Vocabulary Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONDocument.addFileWithUploadedFile(
			assetCategoryIds = "${categoryId}",
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.txt",
			groupName = "Site Name",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.txt",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.viewCategoriesInfo(categoryName = "apple");
	}

	@description = "This ensures that a depot vocabulary cannot be seen when creating assets from the disconnected site."
	@priority = "4"
	test VocabularyShouldNotBeViewedFromDisconnectedSite {
		JSONCategory.addCategory(
			groupName = "Test Depot Name",
			site = "false",
			title = "depot",
			vocabularyName = "Vocabulary Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONDepot.disconnectSite(groupName = "Site Name");

		BlogsNavigator.openToAddEntry(siteURLKey = "site-name");

		AssetCategorization.viewNoVocabularyField(vocabularyName = "Vocabulary Name");

		DMNavigator.openToAddBasicFile(siteURLKey = "site-name");

		AssetCategorization.viewNoVocabularyField(vocabularyName = "Vocabulary Name");

		WebContentNavigator.openToAddBasicArticle(siteURLKey = "site-name");

		AssetCategorization.viewNoVocabularyField(vocabularyName = "Vocabulary Name");

		KBArticle.openToAddKBArticle(siteURLKey = "site-name");

		AssetCategorization.viewNoVocabularyField(vocabularyName = "Vocabulary Name");

		MessageboardsThread.openToAddThread(siteURLKey = "site-name");

		AssetCategorization.viewNoVocabularyField(vocabularyName = "Vocabulary Name");

		WikiNavigator.openToAddPage(
			groupName = "Site Name",
			siteURLKey = "site-name",
			wikiNodeName = "Main");

		AssetCategorization.viewNoVocabularyField(vocabularyName = "Vocabulary Name");
	}

}